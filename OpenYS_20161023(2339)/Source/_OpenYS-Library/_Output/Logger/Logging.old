using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;

namespace OpenYS
{
    public static partial class Log_OLD
    {
        //The time the dump was performed.
        private static DateTime DumpTime = DateTime.Now;

        //We COULD use OpenYS.TimeStarted but this would cause a circular dependancy, so this needs to be set when the program is loaded!
        private static DateTime TimeStarted = DateTime.Now;

        #region ConsoleOutput
        /// <summary>
        /// Logs the provided string as Console Output
        /// 
        /// TO BE USED TO LOG CONSOLE OUTPUT ONLY
        /// </summary>
        /// <param name="Input">String to output</param>
        /// <returns>True if log successful</returns>
        public static bool ConsoleOutput(string Input)
        {
            lock (Threads.GenericThreadSafeLock)
            {
                Directories.DirectoryPrepare("./Logs/");
                Directories.DirectoryPrepare("./Logs/ConsoleLogs/");
                string LogFile = "./Logs/ConsoleLogs/" + OYS_DateTime.ToOYSLongDateTime(TimeStarted).ReplaceAll("(", "_").ReplaceAll(" ", "_").ReplaceAll(")", "_") + ".Log";
                Files.PrepareLog(LogFile);
                string[] MessageOut = { String.Format("{0}: {1}", OYS_DateTime.ToOYSLongDateTime(DateTime.Now), Input) };
                Files.FileAppend(LogFile, MessageOut);
            }
            return true;
        }
        #endregion
        #region Error
        /// <summary>
        /// Logs the provided Exception as Error Output
        /// 
        /// TO BE USED TO LOG Exceptions ONLY
        /// </summary>
        /// <param name="e">Exception to output</param>
        /// <returns>True if log successful</returns>
        public static bool Error(Exception e)
        {
            lock (Threads.GenericThreadSafeLock)
            {
                Directories.DirectoryPrepare("./Logs/");
                Directories.DirectoryPrepare("./Logs/ErrorLogs/");
                string LogFile = "./Logs/ErrorLogs/" + OYS_DateTime.ToOYSLongDateTime(TimeStarted).ReplaceAll("/", "_").ReplaceAll(" ", "_").ReplaceAll(":", "_") + ".Log";
                Files.PrepareLog(LogFile);
                System.Environment.SetEnvironmentVariable("_NT_SYMBOL_PATH", "./Debug/");
                var st = new StackTrace(e, true);
                var frame = st.GetFrame(0);
                string output = "";
                output += "&cMESSAGE:      &e" + e.Message + "\n";
                output += "&cSTART TRACE:  \n";
                foreach (StackFrame Frame in st.GetFrames())
                {
                    output += "&c    METHOD:       &e" + frame.GetMethod() + "\n";
                    output += "&c        LINENUMBER:   &e" + frame.GetFileLineNumber() + "\n";
                    output += "&c        COLUMNNUMBER: &e" + frame.GetFileColumnNumber() + "\n";
                }
                output += "&cEND TRACE.\n";
                output += "\n";
                List<string> MessagesOut = new List<string>();
                foreach (string Line in output.Split('\n'))
                {
                    MessagesOut.Add(String.Format("{0}: {1}", OYS_DateTime.ToOYSLongDateTime(DateTime.Now), Line));
                }
                Files.FileAppend(LogFile, MessagesOut.ToArray());
            }
            return true;
        }
        #endregion
        #region Warning
        /// <summary>
        /// Logs the provided string as a general warning
        /// 
        /// TO BE USED TO LOG CODE FAILURE WARNINGS ONLY
        /// </summary>
        /// <param name="Out">String to output</param>
        /// <returns>True if log successful</returns>
        public static bool Warning(string Out)
        {
            lock (Threads.GenericThreadSafeLock)
            {
                Directories.DirectoryPrepare("./Logs/");
                Directories.DirectoryPrepare("./Logs/WarningLogs/");
                string LogFile = "./Logs/WarningLogs/" + OYS_DateTime.ToOYSLongDateTime(TimeStarted).ReplaceAll("/", "_").ReplaceAll(" ", "_").ReplaceAll(":", "_") + ".Log";
                Files.PrepareLog(LogFile);
                List<string> MessagesOut = new List<string>();
                MessagesOut.Add(String.Format("{0}: {1}", OYS_DateTime.ToOYSLongDateTime(DateTime.Now), Out));
                Files.FileAppend(LogFile, MessagesOut.ToArray());
            }
            return true;
        }
        #endregion
        #region Debug
        /// <summary>
        /// Logs the provided string as a debug message
        /// 
        /// TO BE USED TO LOG DEBUGGING OUTPUT ONLY
        /// (WHEN DEBUGGING WITH OPENYS PARTICIPANTS AND NOT ON LOCAL SYSTEM.)
        /// 
        /// ****
        /// 
        /// TO DEBUG ON LOCAL SYSTEM, USE INSTEAD DEBUG.WRITELINE() AND
        /// THE MESSAGE WILL BE OUTPUT TO VISUAL STUDIO OUTPUT FEED!
        /// 
        /// ****
        /// </summary>
        /// <param name="Out">String to output</param>
        /// <returns>True if log successful</returns>
        public static bool Debug(string Out)
        {
            lock (Threads.GenericThreadSafeLock)
            {
                Directories.DirectoryPrepare("./Logs/");
                Directories.DirectoryPrepare("./Logs/DebuggingLogs/");
                string LogFile = "./Logs/DebuggingLogs/" + OYS_DateTime.ToOYSLongDateTime(TimeStarted).ReplaceAll("/", "_").ReplaceAll(" ", "_").ReplaceAll(":", "_") + ".Log";
                Files.PrepareLog(LogFile);
                List<string> MessagesOut = new List<string>();
                MessagesOut.Add(String.Format("{0}: {1}", OYS_DateTime.ToOYSLongDateTime(DateTime.Now), Out));
                Files.FileAppend(LogFile, MessagesOut.ToArray());
            }
            return true;
        }
        #endregion
        #region Packets
        /// <summary>
        /// Logs the provided Packets List as a Packet Log.
        /// 
        /// TO BE USED TO LOG PACKETS ONLY
        /// </summary>
        /// <param name="Out">String to output</param>
        /// <returns>True if log successful</returns>
        public static bool Packets(List<string> Out)
        {
            lock (Threads.GenericThreadSafeLock)
            {
                Directories.DirectoryPrepare("./Logs/");
                Directories.DirectoryPrepare("./Logs/PacketLogs/");
                string LogFile = "./Logs/PacketLogs/" + OYS_DateTime.ToOYSLongDateTime(DateTime.Now).ReplaceAll("/", "_").ReplaceAll(" ", "_").ReplaceAll(":", "_") + ".Log";
                Files.PrepareLog(LogFile);
                List<string> MessagesOut = new List<string>();
                foreach (string ThisString in Out)
                {
                    MessagesOut.Add(String.Format("{0}: {1}", OYS_DateTime.ToOYSLongDateTime(DateTime.Now), ThisString));
                }
                Files.FileAppend(LogFile, MessagesOut.ToArray());
            }
            return true;
        }
        #endregion

        #region Chat
        /// <summary>
        /// Logs the provided string as a Chat Message
        /// 
        /// TO BE USED TO LOG CHAT MESSAGES ONLY
        /// </summary>
        /// <param name="Out">String to output</param>
        /// <returns>True if log successful</returns>
        public static bool Chat(string Input)
        {
            lock (Threads.GenericThreadSafeLock)
            {
                Directories.DirectoryPrepare("./Logs/");
                Directories.DirectoryPrepare("./Logs/ChatLogs/");
                //System.Console.WriteLine("#" + FormattedDateTime(DateTime.Now).Split(' ')[0] + "#");
                string LogFile = "./Logs/ChatLogs/" + OYS_DateTime.ToOYSLongDateTime(DateTime.Now).Split(' ')[0].ReplaceAll("/", "_") + ".Log";
                Files.PrepareLog(LogFile);
                String[] MessageOut = { String.Format("{0}: {1}", OYS_DateTime.ToOYSLongDateTime(DateTime.Now), Input) };
                Files.FileAppend(LogFile, MessageOut);
            }
            return true;
        }
        #endregion
        #region PrepareDataDump
        /// <summary>
        /// Sets the dump log time to now so that the dump may be time co-ordinated.
        /// </summary>
        public static void PrepareDataDump()
        {
            DumpTime = DateTime.Now;
            return;
        }
        #endregion
        #region DataDump
        /// <summary>
        /// Logs the provided string as a Data Dump
        /// 
        /// TO BE USED TO LOG DATA DUMPS FROM THE /DUMP COMMAND ONLY
        /// </summary>
        /// <param name="Out">String to output</param>
        /// <returns>True if log successful</returns>
        public static bool DataDump(string Input)
        {
            lock (Threads.GenericThreadSafeLock)
            {
                Directories.DirectoryPrepare("./Logs/");
                Directories.DirectoryPrepare("./Logs/DumpLogs/");
                string LogFile = "./Logs/DumpLogs/" + OYS_DateTime.ToOYSLongDateTime(DumpTime).ReplaceAll("/", "_").ReplaceAll(" ", "_").ReplaceAll(":", "_") + ".Log";
                Files.PrepareLog(LogFile);
                String[] MessageOut = { String.Format("{0}: {1}", OYS_DateTime.ToOYSLongDateTime(DumpTime), Input) };
                Files.FileAppend(LogFile, MessageOut);
            }
            return true;
        }
        #endregion
    }
}
